{% extends 'AppBundle::layout.html.twig' %}

{% block body %}

    <div ng-controller="GreetingController">

        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="well" style="margin-top: 10px;">
                        <a href="{{ path('homepage') }}">
                            <h1>FriendsMappin</h1>
                        </a>

                        <h4>
                            Quite buggy, not completely working, but cool proof of concept. By <a href="https://twitter.com/inmarelibero" target="_blank">inmarelibero</a>.
                        </h4>
                    </div>
                    <div class="well" style="margin-top: 10px;">

                        <p>
                            Fill the field below with a Twitter username, and I will show its followers and followings on the map.
                        </p>

                        <br>

                        <form novalidate class="form-inline" action="{{ path('homepage') }}" method="GET">
                            <div class="input-group">
                                <span class="input-group-addon" id="sizing-addon1">@</span>
                                <input id="username" type="text" class="form-control" name="username" ng-model="username" ng-init="username='{{ app.request.get('username', 'inmarelibero') }}'" />
                                <span class="input-group-btn">
                                    <button type="submit" class="btn btn-primary">SHOW ON THE MAP</button>
                                </span>
                            </div><!-- /input-group -->

                            {% if (app.request.get('username')) %}
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                <span>Friends:</span> {[{ user.friends_count }]} ({[{ friends_fetched.length }]} fetched, {[{ friends_markers.length }]} with location)
                                &nbsp;&nbsp;&nbsp;
                                <span>Followers</span>: {[{ user.followers_count }]} ({[{ followers_fetched.length }]} fetched, {[{ followers_markers.length }]} with location)
                            {% endif %}
                        </form>
                    </div>

                </div>
            </div>

            <div class="row">
                <div class="col-md-10">
                    {{ google_map(map) }}
                </div>
                <div class="col-md-2">
                    <ul id="users-loaded">
                        <li style="width: 100%;">Friends</li>
                        <li ng-repeat="user in friends_markers">
                            <a href="{{ path('homepage') }}?username={[{ user.screen_name }]}" tooltip="{[{ user.screen_name }]}">
                                <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                            </a>
                        </li>
                        <li style="width: 100%;">Followers</li>
                        <li ng-repeat="user in followers_markers">
                            <a href="{{ path('homepage') }}?username={[{ user.screen_name }]}" tooltip="{[{ user.screen_name }]}">
                                <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>

{% endblock %}

{% block javascripts %}

    <script>
        app.controller('GreetingController', ['$scope', '$http', 'growl', '$document', 'ngProgress', function($scope, $http, growl, $document, ngProgress) {
            $scope.map = {{map.javascriptVariable}};

            $scope.user = null;
            $scope.totalUsers = 0;
            $scope.usersByLocation = {};
            $scope.usersByCoordinates = {};

            $scope.followers_fetched = [];
            $scope.friends_fetched = [];

            $scope.friends_markers = [];
            $scope.followers_markers = [];

            $scope.finishFetchUsersForUsername_friends == false;
            $scope.finishFetchUsersForUsername_followers == false;

            /*******************************************************************************************************
             * Listeners
             ******************************************************************************************************/
            $scope.$on('getUserProfileFinished', function() {
                $scope.fetchUsers();
            });

            $scope.$on('finishFetchUsersForUsername', function(event, type_of_users) {

                $scope['finishFetchUsersForUsername_' + type_of_users] = true;


                if ($scope['finishFetchUsersForUsername_friends'] == true && $scope['finishFetchUsersForUsername_followers'] == true) {
                    // finish loading of all users (followers and following)
                    $scope.populateUsersByCoordinates();
                }
            });

            $scope.$on('geocodeLocationsFinish', function() {

                ngProgress.complete();

                $scope.drawAllUsersToMap();
            });

            /*******************************************************************************************************
             * User Profile
             ******************************************************************************************************/
            $scope.getUserProfile = function(username) {
                $http.get(Routing.generate('get_profile_show', {
                    'username': username
                }))
                    .success(function (response) {
                        $scope.user = response;

                        // set total users number
                        $scope.totalUsers = $scope.user.followers_count + $scope.user.friends_count;

                        $scope.$emit('getUserProfileFinished');
                    })
                    .error(function (response) {
                        //growl.error("Fatal, maybe too many requests to Twitter. <br>Please try again later.");
                    });
            };

            /*******************************************************************************************************
             * Fetch user followers and followings
             ******************************************************************************************************/
            $scope.fetchUsers = function() {
                if ($scope.username == '') {
                    return;
                }

                ngProgress.set(0);

                // fetch friends and followers
                $scope.fetchUsersForUsername($scope.username, null, 'friends');
                $scope.fetchUsersForUsername($scope.username, null, 'followers');

                // flow follows by event "finishFetchUsersForUsername"
            };

            $scope.fetchUsersForUsername = function(username, cursor, type_of_users) {

                if (cursor == null || cursor == undefined) { cursor = '-1'; }

                /**
                 * config
                 */
                var url = Routing.generate('get_users_of_username', {
                    'username': username,
                    'cursor': cursor,
                    'type_of_users': type_of_users
                });

                /**
                 * request
                 */
                $http.get(url)
                    .success(function (response) {

                        // populate users list
                        $scope.addUsersToList(response.users, response.type_of_users);

                        // update progress bar
                        var progressPercentage = (($scope.friends_fetched.length + $scope.followers_fetched.length) / $scope.totalUsers) * 100;

                        // force percentage to reach 50% maximum
                        ngProgress.set(progressPercentage/2);


                        // load other users
                        if (response.next_cursor_str == '0' || response.next_cursor_str == undefined) {
                            growl.success("Finished loading " + response.type_of_users);

                            $scope.$emit('finishFetchUsersForUsername', response.type_of_users);

                        // users fetching finished
                        } else {
                            $scope.fetchUsersForUsername(username, response.next_cursor_str, response.type_of_users);
                        }
                    })
                    .error(function (response) {
                        growl.error("Fatal, maybe too many requests to Twitter. <br>Please try again later.");
                    });
            };

            $scope.addUsersToList = function(users, type_of_users) {
                if (type_of_users == 'friends') {
                    $scope.friends_fetched = $scope.friends_fetched.concat(users);
                } else if (type_of_users == 'followers') {
                    $scope.followers_fetched = $scope.followers_fetched.concat(users);
                }
            };

            /*******************************************************************************************************
             * Populate array of users by locations and by coordinates
             ******************************************************************************************************/
            $scope.populateUsersByCoordinates = function() {

                /**
                 * build an array with locations as keys
                 */
                $scope.addUsersToArrayByLocation($scope.usersByLocation, $scope.friends_fetched, 'friends');
                $scope.addUsersToArrayByLocation($scope.usersByLocation, $scope.followers_fetched, 'followers');


                console.log($scope.usersByLocation);

                /**
                 * transform the array with locations as keys into an array with coordinates as keys
                 */
                $scope.transformArrayByLocationsIntoArrayByCoordinates();

            };

            $scope.addUsersToArrayByLocation = function(output, users, type_of_users) {
                for (var i in users) {
                    var user = users[i];
                    var location  = user.location;

                    if (location == '' || location == undefined) {
                        continue;
                    }

                    if (output[location] == undefined) {
                        output[location] = {
                            'friends':      [],
                            'followers':    []
                        };
                    }

                    output[location][type_of_users] = output[location][type_of_users].concat([user]);
                }

                return output;
            };

            $scope.transformArrayByLocationsIntoArrayByCoordinates = function() {

                $scope.geocodeLocations();
            };

            $scope.geocodeLocations = function(page) {

                if (page == null ) { page = 1; }

                var locationsPerPage = 40;

                //console.log(Object.keys($scope.usersByLocation), Object.keys($scope.usersByLocation).length);return;

                var locations_keys = Object.keys($scope.usersByLocation);

                var locations_keys_for_current_page = locations_keys.slice((page-1)*locationsPerPage, (page-1)*locationsPerPage + locationsPerPage);

                /**
                 * if there are no more locations to geocode, stop
                 */
                if (locations_keys_for_current_page.length <= 0) {
                    // now $scope.usersByCoordinates is correctly populated
                    $scope.$emit('geocodeLocationsFinish');
                    //console.log($scope.usersByCoordinates);

                    return;
                }

                var progressPercentage = (page / Math.ceil(locations_keys.length / locationsPerPage)) * 100;

                //console.log(page, progressPercentage, 50 + (progressPercentage/2));
                ngProgress.set(50 + (progressPercentage/2));

                /**
                 * config
                 */
                var url = Routing.generate('get_coordinates_from_location');

                /**
                 * request
                 */
                $http.post(url, {
                    'locations': locations_keys_for_current_page
                })
                    .success(function (response) {

                        // populate users list
                        for (var location in response) {
                            var latLong = response[location];

                            var latitude    = latLong.latitude;
                            var longitude   = latLong.longitude;

                            $scope.insertLocationInLatLong(latitude, longitude, location);
                        }

                        // geocode next page of locations
                        $scope.geocodeLocations(page+1);
                    })
                    .error(function (response) {
                        //growl.error("Fatal, maybe too many requests to Twitter. <br>Please try again later.");
                    });
            };

            $scope.insertLocationInLatLong = function(lat, long, location) {

                if (lat == null || long == null) {
                    return;
                }

                var latLongKey = lat + long;

                // create array if does not exist
                if ($scope.usersByCoordinates[latLongKey] == undefined) {
                    $scope.usersByCoordinates[latLongKey] = {
                        'latitude': lat,
                        'locations': [],
                        'longitude': long,
                        'users': {
                            'friends': [],
                            'followers': []
                        }
                    };
                }

                // add location to $scope.usersByCoordinates
                $scope.usersByCoordinates[latLongKey].locations = $scope.usersByCoordinates[latLongKey].locations.concat([location]);

                // add users to $scope.usersByCoordinates
                for (var type_of_user in $scope.usersByCoordinates[latLongKey].users) {
                    $scope.usersByCoordinates[latLongKey].users[type_of_user] = $scope.usersByCoordinates[latLongKey].users[type_of_user].concat(
                        $scope.usersByLocation[location][type_of_user]
                    );
                }

                //console.log($scope.usersByCoordinates);
            };

            /*******************************************************************************************************
             * Add users to map
             ******************************************************************************************************/
            $scope.drawAllUsersToMap = function() {
                for (var coordinatesKey in $scope.usersByCoordinates) {
                    var m = $scope.usersByCoordinates[coordinatesKey];

                    $scope.addMarkerToMap(m.latitude, m.longitude, m.locations, m.users);
                }
            };

            $scope.addMarkerToMap = function(lat, long, locations, users_organized_by_type_of_user) {
                if (lat == null || long == null) {
                    console.log('latitudine o longitude non disponibile');
                    return;
                }

                /**
                 * create marker
                 */
                var myLatlng = new google.maps.LatLng(lat, long);

                var users_length = users_organized_by_type_of_user['friends'].length + users_organized_by_type_of_user['followers'].length;

                var marker = new google.maps.Marker({
                    position:   myLatlng,
                    title:      users_length + ' users',
                    animation:  google.maps.Animation.DROP,
                    //draggable:  true,
                    map:        $scope.map
                });

                marker.setIcon('/images/mapiconscollection-numbers-666666-default/number_' + users_length + '.png');

                var infowindow_content = '';
                infowindow_content += '<div class="location-info-window">';
                infowindow_content += '<p>' + locations[0] +' ('+lat+','+long+')</p><br>';


                for (type_of_user in users_organized_by_type_of_user) {

                    var users = users_organized_by_type_of_user[type_of_user];

                    if (users.length <= 0) {
                        continue;
                    }
                    
                    infowindow_content += '<p>' + type_of_user + ':</p>';

                    infowindow_content += "<div class='users-wrapper'>";
                    for (var i in users) {
                        var user = users[i];

                        infowindow_content += '<a href="https://twitter.com/' + user.screen_name + '" tooltip="' + user.screen_name + '">' +
                        '<img src="' + user.profile_image_url + '" /> ' +
                        '</a>';
                    }
                    infowindow_content += '</div>';

                }
                infowindow_content += '</div>';

                /**
                 * add info window
                 */
                var infowindow = new google.maps.InfoWindow({
                    content: infowindow_content
                });

                //google.maps.event.clearListeners(marker, 'click');
                marker.addListener('click', function() {
                    infowindow.open($scope.map, marker);
                });

                $scope.friends_markers = $scope.friends_markers.concat(users_organized_by_type_of_user['friends']);
                $scope.followers_markers = $scope.followers_markers.concat(users_organized_by_type_of_user['followers']);

                //$scope.map.setCenter(marker.getPosition());

                return marker;
            };

            $document.ready(function(){
                {% if (app.request.get('username')) %}

                    $scope.getUserProfile($scope.username);

                {% endif %}
            })
        }]);
    </script>

{% endblock %}
