{% extends 'AppBundle::layout.html.twig' %}

{% block body %}

    <div id="wrapper-fullscreen">
        <div id="map-wrapper">
            <div id="map_canvas" style="width: 100%; height: 100%"></div>
        </div>
    </div>

    <div id="right-panel">

        <accordion close-others="true">
            <accordion-group heading='{[{ user.screen_name }]}' is-open="true">
                <p>
                    This is the map of the friends and followers of <a href="http://twitter.com/{[{ user.screen_name }]}" target="_blank">{[{ user.screen_name }]}</a>
                </p>

                <b>Friends statistics</b>
                <p>
                    {[{ user.friends_count }]} total
                    <br>
                    {[{ users_fetched.friends_localized_count }]} localized
                </p>
                <b>Followers statistics</b>
                <p>
                    {[{ user.followers_count }]} total
                    <br>
                    {[{ users_fetched.followers_localized_count }]} localized
                </p>
                <div id="advanced-operations" ng-show="user_fetch_finished == true" class="ng-hide">
                    <b>Errors</b>
                    <p>
                        <a class="" href="javascript:void(0);" data-toggle="modal" data-target="#modal-users-without-location">
                            {[{ users_not_localized | keylength }]} users without location
                        </a>
                    </p>

                    <b>More</b>
                    <p>
                        <a
                            href="javascript:void(0)"
                            class="ng-hide"
                            ng-click="toggleHeatmap()"
                            ng-show="user_fetch_finished == true"
                        >
                            {[{ (heatmap_visible == true) ? 'Hide Heatmap':'Show Heatmap' }]}
                        </a>
                    </p>
                </div>
            </accordion-group>
            <accordion-group heading="Friends ({[{ users_fetched.friends_localized_count }]})">
                <ul class="users-loaded">
                    <li ng-repeat="user in getUserFetchedWithLocation().friends">
                        <a href="javascript:void(0)" tooltip="{[{ user.screen_name }]}" ng-click="handleClickOnUser(user)">
                            <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                        </a>
                    </li>
                </ul>
            </accordion-group>
            <accordion-group heading="Followers ({[{ users_fetched.followers_localized_count }]})">
                <ul class="users-loaded">
                    <li ng-repeat="user in getUserFetchedWithLocation().followers">
                        <a href="javascript:void(0)" tooltip="{[{ user.screen_name }]}" ng-click="handleClickOnUser(user)">
                            <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                        </a>
                    </li>
                </ul>
            </accordion-group>
        </accordion>

    </div>

    <!-- Modal -->
    <div class="modal fade" id="modal-users-without-location" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Users without location</h4>
                </div>
                <div class="modal-body">
                    <p>
                        We weren't able to retrieve the location for {[{ users_not_localized | keylength }]} users.<br>
                        Click on a picture and send a tweet asking to update his location.
                    </p>
                    <ul id="list-users-without-location">
                        <li ng-repeat="user in users_not_localized">
                            <a href="https://twitter.com/intent/tweet?text={{ '@'|url_encode }}{[{ user.screen_name }]} would you set the location in your Twitter profile? I'd like to view you on {{ app.request.uri|url_encode }}" tooltip="{[{ user.screen_name }]}" ng-click="">
                                <img src="{[{ user.profile_image_url }]}" />
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}

    <script>
        app.controller('FriendsMappinController', ['$scope', '$http', 'growl', '$document', 'ngProgress', 'usSpinnerService', function($scope, $http, growl, $document, ngProgress, usSpinnerService) {
            $scope.map = new google.maps.Map(document.getElementById('map_canvas'), {
                center: { lat: 48.856614, lng: 2.352222},
                zoom: 3
            });

            // fake user at initialization
            $scope.user = {
                'friends_count': 0,
                'followers_count': 0
            };
            $scope.totalUsers = 0;

            $scope.users_fetched = {
                'friends': [],
                'followers': [],
                'friends_localized_count': 0,
                'followers_localized_count': 0
            };

            $scope.users_not_localized = {};

            $scope.user_fetch_finished = false;
            $scope.heatmap_visible = false;

            $scope.markers = {};

            $scope.init = function() {
                $scope.rainbow = $scope.initializeRainbow();

                $scope.markerCluster = new MarkerClusterer($scope.map, [], {
                    gridSize: 40,
                    minimumClusterSize: 5
                    /*
                    calculator: function (markers, numStyles) {
                        return {
                            text: markers.length,
                            index: numStyles
                        };
                    }
                    */
                });
            };

            /*******************************************************************************************************
             * Listeners
             ******************************************************************************************************/
            $scope.$on('finishFetchFriendsAndFollowers', function(event, type_of_users) {

                $scope['finishFetchFriendsAndFollowers_' + type_of_users] = true;

                if ($scope['finishFetchFriendsAndFollowers_friends'] == true && $scope['finishFetchFriendsAndFollowers_followers'] == true) {
                    // finish loading of all users (followers and following)


                    //console.log($scope.markers);
                    //console.log('xxxxxxxxxxxxxxx');
                    //console.log($scope.users_fetched);
                    //console.log($scope.users_fetched);

                    ngProgress.complete();
                    $scope.setOperationMessage('Done!');
                    $scope.closeOperationMessage();

                    $scope.$emit('finish_user_fetching');
                }
            });

            /*
            $scope.$on('start_user_fetching', function(event) {

            });
            */
            $scope.$on('finish_user_fetching', function(event) {
                $scope.user_fetch_finished = true;

                $scope.users_not_localized = $scope.getUsersNotLocalized();
            });

            /*******************************************************************************************************
             * User Profile
             ******************************************************************************************************/
            $scope.getUserProfile = function(username) {
                $http.get(Routing.generate('get_profile_show', {
                    'username': username
                }))
                    .success(function (response) {
                        $scope.user = response;

                        // set total users number
                        $scope.totalUsers = $scope.user.followers_count + $scope.user.friends_count;

                        $scope.startUsersFetching($scope.username);
                    })
                    .error(function (response) {
                        growl.error("Fatal: unable to retrieve profile" + username + ". <br>Please try again later.");
                    });
            };

            /*******************************************************************************************************
             * Fetch user followers and followings
             ******************************************************************************************************/
            /**
             * Fetches users and throws an event when finished
             */
            $scope.startUsersFetching = function(username) {
                if (username == '') {
                    return;
                }

                $scope.$emit('start_user_fetching');

                $scope.setOperationMessage('Preparing your request...');
                usSpinnerService.spin('spinner-operation');
                ngProgress.set(0);

                // fetch friends and followers
                $scope.fetchFriendsAndFollowers(username, null, 'friends');
                $scope.fetchFriendsAndFollowers(username, null, 'followers');

                // flow follows by event "finishfetchFriendsAndFollowers"
            };

            $scope.fetchFriendsAndFollowers = function(username, cursor, type_of_users) {

                // default value for the paramter "cursor" of Twitter
                if (cursor == null || cursor == undefined) { cursor = '-1'; }

                /**
                 * Generate url for users fetching
                 */
                var url = Routing.generate('get_users_of_username', {
                    'username': username,
                    'cursor': cursor,
                    'type_of_users': type_of_users
                });

                /**
                 * request
                 */
                $http.get(url)
                    .success(function (response) {

                        // populate users list
                        $scope.handleFetchedUsers(response.users, response.type_of_users);

                        // update progress bar
                        var numUsersFetchedSoFar = $scope.getNumFetchedUsersSoFar();
                        var progressPercentage = numUsersFetchedSoFar / $scope.totalUsers * 100;
                        ngProgress.set(progressPercentage);

                        // update operation message
                        $scope.operation_in_progress = $scope.users_fetched.friends.length +'/' + $scope.user.friends_count + ' friends ' +
                        //'<br>' +
                        'and '+ $scope.users_fetched.followers.length +'/' + $scope.user.followers_count + ' followers so far, and counting...';

                        // load next users
                        if (response.next_cursor_str == '0' || response.next_cursor_str == undefined) {
                            //growl.success("Finished loading " + response.type_of_users);
                            $scope.$emit('finishFetchFriendsAndFollowers', response.type_of_users);
                        } else {
                            // users fetching finished
                            $scope.fetchFriendsAndFollowers(username, response.next_cursor_str, response.type_of_users);
                        }
                    })
                    .error(function (response) {
                        growl.error("Fatal, maybe too many requests to Twitter. <br>Please try again later.");
                    });
            };

            /**
             * Return the total number of fetched users so far
             */
            $scope.getNumFetchedUsersSoFar = function() {
                return $scope.users_fetched.friends.length + $scope.users_fetched.followers.length;
            };

            /**
             * Handle a batch of fetched user from Twitter
             */
            $scope.handleFetchedUsers = function(users, type_of_users) {
                /**
                 * put users in $scope.users_fetched
                 */
                angular.forEach(users, function(user, key) {
                    if ($scope.users_fetched[type_of_users] == undefined) {
                        $scope.users_fetched[type_of_users] = [];
                    }
                    // add the single user to the list
                    $scope.users_fetched[type_of_users] = $scope.users_fetched[type_of_users].concat([user]);

                    $scope.drawUserOnMap(user, type_of_users);
                });
            };

            /**
             * @todo refactor this, quite heavy
             */
            $scope.getUserFetchedWithLocation = function() {
                var output = {};

                angular.forEach($scope.users_fetched, function(users, type_of_users) {

                    output[type_of_users] = [];

                    angular.forEach(users, function(user, key) {
                        if (user.latitude != null && user.longitude != null) {
                            output[type_of_users] = output[type_of_users].concat([user]);
                        }
                    });
                });

                return output;
            };

            /*******************************************************************************************************
             * Add users to map
             ******************************************************************************************************/
            /**
             * Draws a single user on the map
             */
            $scope.drawUserOnMap = function(user, type_of_user) {
                if (user.latitude == null || user.longitude == null) {
                    return;
                }

                var marker = $scope.createOrRetrieveMarker(user.latitude, user.longitude);
                $scope.addUserToMarker(user, type_of_user, marker);

                if (type_of_user == 'friends') {
                    $scope.users_fetched.friends_localized_count += 1;
                } else if (type_of_user == 'followers') {
                    $scope.users_fetched.followers_localized_count += 1;
                }
            };

            $scope.getCoordinatesKeyFromCoordinates = function(lat, lon) {
                return lat + ',' + lon;
            };

            $scope.getIconForMarker = function(number_of_users) {
                var color = $scope.rainbow.colourAt(number_of_users);
                return 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld='+number_of_users+'|' + color + '|000000';
            };

            /**
             * Retrieve a marker for given coordinates, or return one if already exists
             */
            $scope.createOrRetrieveMarker = function(lat, lon) {
                // retrieve marker if already present in list
                var latLonKey = $scope.getCoordinatesKeyFromCoordinates(lat, lon);

                var marker = $scope.retrieveMarker(lat, lon);

                if (marker == null) {
                    marker = $scope.createMarker(lat, lon);

                    $scope.markers[latLonKey] = marker;
                }

                return marker;
            };

            $scope.retrieveMarker = function(lat, lon) {
                // retrieve marker if already present in list
                var latLonKey = $scope.getCoordinatesKeyFromCoordinates(lat, lon);

                var marker = $scope.markers[latLonKey];

                if (marker == undefined) {
                    return null;
                }

                return marker;
            };

            /**
             * Create and return a Marker
             */
            $scope.createMarker = function(lat, long) {
                var position = new google.maps.LatLng(lat, long);

                var marker = new google.maps.Marker({
                    position:   position,
                    //title:      users_length + ' users',
                    //animation:  google.maps.Animation.DROP,
                    draggable:  true,
                    map:        $scope.map
                });

                marker.users = {
                    'friends': [],
                    'followers': []
                };

                marker.locations = [];

                marker.addListener('click', function() {
                    // close all infowindows
                    angular.forEach($scope.markers, function(marker, key) {
                        if (marker.infowindow) {
                            marker.infowindow.close();
                        }
                    });

                    //marker.infowindow.close();
                    if (marker.infowindow) {
                        marker.infowindow.setMap(null);
                        marker.infowindow = null;
                    }

                    // create the new infowindow
                    marker.infowindow = $scope.createInfoWindowForMarker(marker);

                    // open infowindow
                    marker.infowindow.open($scope.map, marker);
                });

                $scope.markerCluster.addMarker(marker);

                return marker;
            };

            /**
             * Add a user to a marker
             */
            $scope.addUserToMarker = function(user, type_of_user, marker) {
                // add user the list stored in marker
                marker.users[type_of_user] = $scope.addElementsToList([user], marker.users[type_of_user]);

                // update marker "locations" variable
                marker.locations = $scope.addElementsToList([user.location], marker.locations);

                var users_count = marker.users.friends.length + marker.users.followers.length;

                // update marker icon
                marker.setIcon($scope.getIconForMarker(users_count));

                // update marker title
                marker.title = users_count + ' users';
            };

            $scope.createInfoWindowForMarker = function(marker) {
                var infowindow_content = '';

                infowindow_content += '<div class="location-info-window">';

                infowindow_content += '<p class="location">' + marker.locations[0] +'</p><br>';

                angular.forEach(marker.users, function(users, type_of_users) {

                    if (users.length <= 0) return;

                    var p = type_of_users.charAt(0).toUpperCase() + type_of_users.slice(1);

                    infowindow_content += '<p>' + p + ' ('+users.length+'):</p>';

                    infowindow_content += "<div class='users-wrapper'>";

                    angular.forEach(users, function(user, key) {
                        infowindow_content += '<span tooltip="' + user.screen_name + '">' +
                            '<img src="' + user.profile_image_url + '" /> ' +
                        '</span>';
                    });

                    infowindow_content += '</div>';
                });

                infowindow_content += '</div>';

                /**
                 * add info window
                 */
                var infowindow = new google.maps.InfoWindow({
                    content: infowindow_content
                });

                return infowindow;
            };

            /**
             * Show Heatmap
             */
            $scope.showHeatMap = function() {
                $scope.heatmap_visible = true;

                $scope.heatmap = null;
                delete $scope.heatmap;

                var heatmapData = [];

                angular.forEach($scope.markers, function(marker, key) {
                    var users_count = marker.users.friends.length + marker.users.followers.length;

                    heatmapData = heatmapData.concat([{
                        'location': marker.position,
                        'weight': users_count
                    }]);
                });

                $scope.heatmap = new google.maps.visualization.HeatmapLayer({
                    data: heatmapData,
                    radius: 30
                });
                $scope.heatmap.setMap($scope.map);
            };

            /**
             * Hide Heatmap
             */
            $scope.hideHeatMap = function() {
                $scope.heatmap_visible = false;

                if ($scope.heatmap) {
                    $scope.heatmap.setMap(null);
                }
            };

            /*******************************************************************************************************
             * Utils
             ******************************************************************************************************/
            $scope.addElementsToList = function(users, list) {
                var output = list;

                angular.forEach(users, function(user, key) {
                    if (output.indexOf(user) < 0) {
                        output = output.concat(user);
                    }
                });

                return output;
            };

            $scope.rgbToHex = function(rgb) {
                rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
                return (rgb && rgb.length === 4) ? "" +
                ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
            };

            $scope.initializeRainbow = function() {
                var rainbow = new Rainbow();
                rainbow.setSpectrum('#FFFF99', 'red');
                rainbow.setNumberRange(0, 100);

                return rainbow;
            };

            /**
             * Set the center on a given map
             */
            $scope.setCenterOnMap = function(map, position) {
                map.setCenter(position);
                map.setZoom(9);
            };

            $scope.setOperationMessage = function(message) {
                $scope.operation_in_progress = message;
            };

            $scope.closeOperationMessage = function() {
                usSpinnerService.stop('spinner-operation');

                setTimeout(function() {
                    $scope.operation_in_progress = '';
                }, 3000);
            };

            $scope.showSingleOperationMessage = function(message) {
                $scope.operation_in_progress = message;

                $scope.closeOperationMessage();
            };

            $scope.getUsersNotLocalized = function() {
                var output = {};

                var keys = ['friends', 'followers'];
                angular.forEach(keys, function(key, index) {
                    angular.forEach($scope.users_fetched[key], function(user, k) {
                        if (output[user.screen_name] == undefined) {
                            output[user.screen_name] = user;
                        }
                    });
                });

                return output;
            }

            /*******************************************************************************************************
             * Clicks
             ******************************************************************************************************/
            $scope.handleClickOnUser = function(user) {
                var marker = $scope.retrieveMarker(user.latitude, user.longitude);

                if (marker == null) {
                    return;
                }

                var position = new google.maps.LatLng(user.latitude, user.longitude);
                $scope.setCenterOnMap($scope.map, position);

                google.maps.event.trigger(marker, 'click');

                //$scope.showSingleOperationMessage('Map centered on <a href="http://twitter.com/'+user.screen_name+'">@' + user.screen_name + '</a> at '+user.latitude + ',' + user.longitude);
                $scope.showSingleOperationMessage('Centered on @' + user.screen_name + ' at '+user.latitude + ',' + user.longitude);
            };

            /**
             * Toggle Heatmap
             */
            $scope.toggleHeatmap = function() {
                if ($scope.heatmap_visible == false) {
                    $scope.showHeatMap();
                } else {
                    $scope.hideHeatMap();
                }
            };

            /*******************************************************************************************************
             * On document ready
             ******************************************************************************************************/
            $document.ready(function(){
                {% if (app.request.get('username')) %}
                    $scope.init();

                    $scope.getUserProfile($scope.username);
                {% endif %}
            })
        }]);
    </script>

{% endblock %}
