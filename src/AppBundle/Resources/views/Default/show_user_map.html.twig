{% extends 'AppBundle::layout.html.twig' %}

{% block body %}

    <div>

        <div id="wrapper-fullscreen">

            <div id="map-wrapper">
                {{ google_map(map) }}
            </div>
            <div id="map-modal" class="ng-hide" ng-show="operation_in_progress != ''">
                <p style="position:relative; display: inline-block; padding-left: 28px;">
                    <span us-spinner="{radius:4, width:2, length: 3, color: '#FFF'}" spinner-key="spinner-operation" style="position: relative; left: 13px; top: 10px; position: absolute;"></span>

                    {[{ operation_in_progress }]}
                </p>
                {#

                <br><br>
                <p style="font-size: 12px;">
                    While waiting, consider spreading the voice via
                    {% if (app.request.get('username')) %}
                        <a href="https://twitter.com/share" class="twitter-share-button" data-text="FriendMappin shows where followers of @{{ app.request.get('username') }} are. #twitter #map" data-url="{{ app.request.uri }}">Tweet</a>
                    {% else %}
                        <a href="https://twitter.com/share" class="twitter-share-button" data-text="FriendsMappin - Find where your followers are. #twitter #map" data-url="{{ app.request.uri }}">Tweet</a>
                    {% endif %}
                </p>
                #}
            </div>

            <div id="right-panel">
                <ul class="users-loaded">
                    <li class="title" ng-show="getUserFetchedWithLocation().friends.length > 0">Friends ({[{ getUserFetchedWithLocation().friends.length }]})</li>
                    <li ng-repeat="user in getUserFetchedWithLocation().friends">
                        <span tooltip="{[{ user.screen_name }]}">
                            <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                        </span>
                    </li>
                </ul>
                <br ng-show="friends_markers.length > 0 && followers_markers.length > 0">
                <ul class="users-loaded">
                    <li class="title" ng-show="getUserFetchedWithLocation().followers.length > 0">Followers ({[{ getUserFetchedWithLocation().followers.length }]})</li>
                    <li ng-repeat="user in getUserFetchedWithLocation().followers">
                        <span tooltip="{[{ user.screen_name }]}">
                            <img src="{[{ user.profile_image_url }]}" tooltip="{[{ user.screen_name }]}" />
                        </span>
                    </li>
                </ul>
            </div>

        </div>

    </div>

{% endblock %}

{% block javascripts %}

    <script>
        app.controller('GreetingController', ['$scope', '$http', 'growl', '$document', 'ngProgress', 'usSpinnerService', function($scope, $http, growl, $document, ngProgress, usSpinnerService) {
            $scope.map = {{map.javascriptVariable}};

            $scope.user = null;
            $scope.totalUsers = 0;

            $scope.users_fetched = {
                'friends': [],
                'followers': []
            };

            $scope.finishFetchUsersForUsername_friends == false;
            $scope.finishFetchUsersForUsername_followers == false;

            $scope.markers = {};

            $scope.init = function() {
                $scope.rainbow = $scope.initializeRainbow();
            };

            /*******************************************************************************************************
             * Listeners
             ******************************************************************************************************/
            $scope.$on('finishFetchFriendsAndFollowers', function(event, type_of_users) {

                $scope['finishFetchFriendsAndFollowers_' + type_of_users] = true;


                if ($scope['finishFetchFriendsAndFollowers_friends'] == true && $scope['finishFetchFriendsAndFollowers_followers'] == true) {
                    // finish loading of all users (followers and following)

                    console.log($scope.markers);
                    //console.log('xxxxxxxxxxxxxxx');

                    /*
                    $scope.operation_in_progress = "Almost there, let me palce the users on the map...";
                    $scope.drawAllUsersToMap();
                    */

                    usSpinnerService.stop('spinner-operation');
                    $scope.operation_in_progress = '';
                    ngProgress.complete();
                }
            });

            /*******************************************************************************************************
             * User Profile
             ******************************************************************************************************/
            $scope.getUserProfile = function(username) {
                $http.get(Routing.generate('get_profile_show', {
                    'username': username
                }))
                    .success(function (response) {
                        $scope.user = response;

                        // set total users number
                        $scope.totalUsers = $scope.user.followers_count + $scope.user.friends_count;

                        $scope.startUsersFetching($scope.username);
                    })
                    .error(function (response) {
                        growl.error("Fatal: unable to retrieve profile" + username + ". <br>Please try again later.");
                    });
            };

            /*******************************************************************************************************
             * Fetch user followers and followings
             ******************************************************************************************************/
            /**
             * Fetches users and throws an event when finished
             */
            $scope.startUsersFetching = function(username) {
                if (username == '') {
                    return;
                }

                $scope.operation_in_progress = 'Preparing your request...';
                usSpinnerService.spin('spinner-operation');
                ngProgress.set(0);

                // fetch friends and followers
                $scope.fetchFriendsAndFollowers(username, null, 'friends');
                $scope.fetchFriendsAndFollowers(username, null, 'followers');

                // flow follows by event "finishfetchFriendsAndFollowers"
            };

            $scope.fetchFriendsAndFollowers = function(username, cursor, type_of_users) {

                // default value for the paramter "cursor" of Twitter
                if (cursor == null || cursor == undefined) { cursor = '-1'; }

                /**
                 * Generate url for users fetching
                 */
                var url = Routing.generate('get_users_of_username', {
                    'username': username,
                    'cursor': cursor,
                    'type_of_users': type_of_users
                });

                /**
                 * request
                 */
                $http.get(url)
                    .success(function (response) {

                        // populate users list
                        $scope.handleFetchedUsers(response.users, response.type_of_users);

                        // update progress bar
                        var numUsersFetchedSoFar = $scope.getNumFetchedUsersSoFar();
                        var progressPercentage = numUsersFetchedSoFar / $scope.totalUsers * 100;
                        ngProgress.set(progressPercentage);

                        // update operation message
                        $scope.operation_in_progress = $scope.users_fetched.friends.length +'/' + $scope.user.friends_count + ' friends ' +
                        //'<br>' +
                        'and '+ $scope.users_fetched.followers.length +'/' + $scope.user.followers_count + ' followers so far, and counting...';

                        // load next users
                        if (response.next_cursor_str == '0' || response.next_cursor_str == undefined) {
                            //growl.success("Finished loading " + response.type_of_users);
                            $scope.$emit('finishFetchFriendsAndFollowers', response.type_of_users);
                        } else {
                            // users fetching finished
                            $scope.fetchFriendsAndFollowers(username, response.next_cursor_str, response.type_of_users);
                        }
                    })
                    .error(function (response) {
                        growl.error("Fatal, maybe too many requests to Twitter. <br>Please try again later.");
                    });
            };

            /**
             * Return the total number of fetched users so far
             */
            $scope.getNumFetchedUsersSoFar = function() {
                return $scope.users_fetched.friends.length + $scope.users_fetched.followers.length;
            };

            /**
             * Handle a batch of fetched user from Twitter
             */
            $scope.handleFetchedUsers = function(users, type_of_users) {
                /**
                 * put users in $scope.users_fetched
                 */
                angular.forEach(users, function(user, key) {
                    if ($scope.users_fetched[type_of_users] == undefined) {
                        $scope.users_fetched[type_of_users] = [];
                    }

                    // add the single user to the list
                    $scope.users_fetched[type_of_users] = $scope.users_fetched[type_of_users].concat([user]);

                    $scope.drawUserOnMap(user, type_of_users);
                });
            };

            /**
             * @todo refactor this, quite heavy
             */
            $scope.getUserFetchedWithLocation = function() {
                var output = {};

                angular.forEach($scope.users_fetched, function(users, type_of_users) {

                    output[type_of_users] = [];

                    angular.forEach(users, function(user, key) {
                        if (user.location != undefined && user.location != null && user.location != '') {
                            output[type_of_users] = output[type_of_users].concat([user]);
                        }
                    });
                });

                return output;
            };

            /*******************************************************************************************************
             * Add users to map
             ******************************************************************************************************/
            /**
             * Draws a single user on the map
             */
            $scope.drawUserOnMap = function(user, type_of_user) {
                if (user.latitude == null || user.longitude == null) {
                    return;
                }

                var marker = $scope.createOrRetrieveMarker(user.latitude, user.longitude);
                $scope.addUserToMarker(user, type_of_user, marker);
            };

            $scope.getCoordinatesKeyFromCoordinates = function(lat, lon) {
                return lat + ',' + lon;
            };

            $scope.getIconForMarker = function(number_of_users) {
                var color = $scope.rainbow.colourAt(number_of_users);
                return 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld='+number_of_users+'|' + color + '|000000';
            };

            /**
             * Retrieve a marker for given coordinates, or return one if already exists
             */
            $scope.createOrRetrieveMarker = function(lat, lon) {
                // retrieve marker if already present in list
                var latLonKey = $scope.getCoordinatesKeyFromCoordinates(lat, lon);

                var marker = $scope.markers[latLonKey];

                if (marker == undefined) {
                    marker = $scope.createMarker(lat, lon);

                    $scope.markers[latLonKey] = marker;
                }

                return marker;
            };

            /**
             * Create and return a Marker
             */
            $scope.createMarker = function(lat, long) {
                var position = new google.maps.LatLng(lat, long);

                var marker = new google.maps.Marker({
                    position:   position,
                    //title:      users_length + ' users',
                    //animation:  google.maps.Animation.DROP,
                    draggable:  true,
                    map:        $scope.map
                });

                marker.users = {
                    'friends': [],
                    'followers': []
                };

                marker.locations = [];

                marker.addListener('click', function() {
                    // close all infowindows
                    angular.forEach($scope.markers, function(marker, key) {
                        if (marker.infowindow) {
                            marker.infowindow.close();
                        }
                    });

                    //marker.infowindow.close();
                    if (marker.infowindow) {
                        marker.infowindow.setMap(null);
                        marker.infowindow = null;
                    }

                    // create the new infowindow
                    marker.infowindow = $scope.createInfoWindowForMarker(marker);

                    // open infowindow
                    marker.infowindow.open($scope.map, marker);
                });

                return marker;
            };

            /**
             * Add a user to a marker
             */
            $scope.addUserToMarker = function(user, type_of_user, marker) {
                // add user the list stored in marker
                marker.users[type_of_user] = $scope.addElementsToList([user], marker.users[type_of_user]);

                // update marker "locations" variable
                marker.locations = $scope.addElementsToList([user.location], marker.locations);

                var users_count = marker.users.friends.length + marker.users.followers.length;

                // update marker icon
                marker.setIcon($scope.getIconForMarker(users_count));

                // update marker title
                marker.title = users_count + ' users';
            };

            $scope.createInfoWindowForMarker = function(marker) {
                var infowindow_content = '';

                infowindow_content += '<div class="location-info-window">';

                infowindow_content += '<p>' + marker.locations[0] +'</p><br>';

                angular.forEach(marker.users, function(users, type_of_users) {

                    if (users.length <= 0) return;

                    infowindow_content += '<p>' + type_of_users + ':</p>';

                    infowindow_content += "<div class='users-wrapper'>";

                    angular.forEach(users, function(user, key) {
                        infowindow_content += '<span" tooltip="' + user.screen_name + '">' +
                            '<img src="' + user.profile_image_url + '" /> ' +
                        '</span>';
                    });

                    infowindow_content += '</div>';
                });

                infowindow_content += '</div>';

                /**
                 * add info window
                 */
                var infowindow = new google.maps.InfoWindow({
                    content: infowindow_content
                });

                return infowindow;
            };

            /*******************************************************************************************************
             * Utils
             ******************************************************************************************************/
            $scope.addElementsToList = function(users, list) {
                var output = list;

                angular.forEach(users, function(user, key) {
                    if (output.indexOf(user) < 0) {
                        output = output.concat(user);
                    }

                });

                return output;
            };

            $scope.rgbToHex = function(rgb) {
                rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
                return (rgb && rgb.length === 4) ? "" +
                ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
                ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
            };

            $scope.initializeRainbow = function() {
                var rainbow = new Rainbow();
                rainbow.setSpectrum('#FFFF99', 'red');
                rainbow.setNumberRange(0, 100);

                return rainbow;
            };

            /*******************************************************************************************************
             * On document ready
             ******************************************************************************************************/
            $document.ready(function(){
                {% if (app.request.get('username')) %}
                    $scope.init();

                    $scope.getUserProfile($scope.username);
                {% endif %}
            })
        }]);
    </script>

{% endblock %}
